name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * *'  # Daily security scan at 2 AM UTC

env:
  PYTHON_VERSION: '3.11'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Lint with flake8
      run: |
        flake8 birthday_bot/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 birthday_bot/ --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics
    
    - name: Type checking with mypy
      run: |
        mypy birthday_bot/ --ignore-missing-imports || true
    
    - name: Run tests with pytest
      run: |
        pytest tests/ \
          --verbose \
          --cov=birthday_bot \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --junitxml=pytest-results.xml \
          --maxfail=5
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Run Safety (dependency vulnerabilities)
      run: safety check || true
    
    - name: Run Bandit (security linter)
      run: bandit -r birthday_bot/ -f json -o bandit-report.json || true
    
    - name: Run pip-audit
      run: pip-audit --requirement requirements.txt || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json

  docker:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    permissions:
      contents: read
      packages: write
    steps:
    - uses: actions/checkout@v4
    
    - uses: docker/setup-buildx-action@v3
    
    - uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - uses: docker/metadata-action@v5
      id: meta
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=sha,prefix={{branch}}-
    
    - uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          VCS_REF=${{ github.sha }}
    
    - name: Scan Docker image for vulnerabilities
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      continue-on-error: true
      with:
        sarif_file: 'trivy-results.sarif'

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [test, security]
    if: always()
    steps:
    - name: Check job results
      run: |
        if [[ "${{ needs.test.result }}" != "success" ]]; then
          echo "‚ùå Tests failed"
          exit 1
        fi
        if [[ "${{ needs.security.result }}" != "success" ]]; then
          echo "‚ö†Ô∏è Security scan had issues (non-blocking)"
        fi
        echo "‚úÖ Quality gate passed"
  trigger-deployment:
    name: Trigger Deployment
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Trigger Watchtower Updates
      env:
        # Single Watchtower configuration (legacy support)
        WATCHTOWER_URL: ${{ secrets.WATCHTOWER_URL }}
        WATCHTOWER_TOKEN: ${{ secrets.WATCHTOWER_TOKEN }}
        # Multi-Watchtower configuration (JSON format)
        # Example: [{"name":"prod","url":"http://server1:8080","token":"token1"},{"name":"staging","url":"http://server2:8080","token":"token2"}]
        WATCHTOWER_ENDPOINTS: ${{ secrets.WATCHTOWER_ENDPOINTS }}
      run: |
        # Function to trigger a single Watchtower instance
        trigger_watchtower() {
          local name=$1
          local url=$2
          local token=$3
          
          echo "üöÄ Triggering Watchtower deployment for: $name"
          response=$(curl -s -w "\n%{http_code}" -H "Authorization: Bearer ${token}" \
            "${url}/v1/update" 2>/dev/null || echo "000")
          
          http_code=$(echo "$response" | tail -n1)
          
          if [[ "$http_code" -eq 200 ]] || [[ "$http_code" -eq 204 ]]; then
            echo "‚úÖ [$name] Deployment triggered successfully!"
            return 0
          else
            echo "‚ùå [$name] Failed to trigger deployment. HTTP Status: $http_code"
            return 1
          fi
        }
        
        triggered=0
        failed=0
        
        # Check for multi-Watchtower configuration first
        if [[ -n "$WATCHTOWER_ENDPOINTS" ]]; then
          echo "üìã Using multi-Watchtower configuration"
          
          # Parse JSON array of endpoints
          while IFS= read -r endpoint; do
            name=$(echo "$endpoint" | jq -r '.name // "unnamed"')
            url=$(echo "$endpoint" | jq -r '.url // empty')
            token=$(echo "$endpoint" | jq -r '.token // empty')
            
            if [[ -n "$url" ]] && [[ -n "$token" ]]; then
              if trigger_watchtower "$name" "$url" "$token"; then
                ((triggered++))
              else
                ((failed++))
              fi
            fi
          done < <(echo "$WATCHTOWER_ENDPOINTS" | jq -c '.[]' 2>/dev/null || echo "")
          
        # Fall back to single Watchtower configuration
        elif [[ -n "$WATCHTOWER_URL" ]] && [[ -n "$WATCHTOWER_TOKEN" ]]; then
          echo "üìã Using single Watchtower configuration"
          if trigger_watchtower "default" "$WATCHTOWER_URL" "$WATCHTOWER_TOKEN"; then
            ((triggered++))
          else
            ((failed++))
          fi
        else
          echo "‚ö†Ô∏è  No Watchtower configuration found"
          echo "To enable automatic deployments, set either:"
          echo "  - WATCHTOWER_URL and WATCHTOWER_TOKEN (single instance)"
          echo "  - WATCHTOWER_ENDPOINTS (multiple instances as JSON)"
          exit 0
        fi
        
        echo ""
        echo "üìä Summary: $triggered succeeded, $failed failed"
        
        # Don't fail the build even if some deployments failed
        exit 0
